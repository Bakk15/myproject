// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.myproject.registration.web;

import com.myproject.registration.domain.Person;
import com.myproject.registration.reference.AddressType;
import com.myproject.registration.reference.BloodGroup;
import com.myproject.registration.reference.EyeColors;
import com.myproject.registration.reference.HairColors;
import com.myproject.registration.reference.MaritalStatus;
import com.myproject.registration.web.PersonBean;
import com.myproject.registration.web.util.MessageFactory;
import java.io.ByteArrayInputStream;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.UIComponent;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.convert.DateTimeConverter;
import javax.faces.validator.LengthValidator;
import javax.faces.validator.LongRangeValidator;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.calendar.Calendar;
import org.primefaces.component.commandbutton.CommandButton;
import org.primefaces.component.filedownload.FileDownloadActionListener;
import org.primefaces.component.fileupload.FileUpload;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.inputtextarea.InputTextarea;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.component.spinner.Spinner;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import org.primefaces.event.FileUploadEvent;
import org.primefaces.model.DefaultStreamedContent;
import org.primefaces.model.StreamedContent;

privileged aspect PersonBean_Roo_ManagedBean {
    
    declare @type: PersonBean: @ManagedBean(name = "personBean");
    
    declare @type: PersonBean: @SessionScoped;
    
    private String PersonBean.name = "People";
    
    private Person PersonBean.person;
    
    private List<Person> PersonBean.allPeople;
    
    private boolean PersonBean.dataVisible = false;
    
    private List<String> PersonBean.columns;
    
    private HtmlPanelGrid PersonBean.createPanelGrid;
    
    private HtmlPanelGrid PersonBean.editPanelGrid;
    
    private HtmlPanelGrid PersonBean.viewPanelGrid;
    
    private boolean PersonBean.createDialogVisible = false;
    
    @PostConstruct
    public void PersonBean.init() {
        columns = new ArrayList<String>();
        columns.add("firstName");
        columns.add("lastName");
        columns.add("birthDay");
        columns.add("district");
        columns.add("madinah");
    }
    
    public String PersonBean.getName() {
        return name;
    }
    
    public List<String> PersonBean.getColumns() {
        return columns;
    }
    
    public List<Person> PersonBean.getAllPeople() {
        return allPeople;
    }
    
    public void PersonBean.setAllPeople(List<Person> allPeople) {
        this.allPeople = allPeople;
    }
    
    public String PersonBean.findAllPeople() {
        allPeople = Person.findAllPeople();
        dataVisible = !allPeople.isEmpty();
        return null;
    }
    
    public boolean PersonBean.isDataVisible() {
        return dataVisible;
    }
    
    public void PersonBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid PersonBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void PersonBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid PersonBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void PersonBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid PersonBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void PersonBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid PersonBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel firstNameCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        firstNameCreateOutput.setFor("firstNameCreateInput");
        firstNameCreateOutput.setId("firstNameCreateOutput");
        firstNameCreateOutput.setValue("First Name:");
        htmlPanelGrid.getChildren().add(firstNameCreateOutput);
        
        InputText firstNameCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        firstNameCreateInput.setId("firstNameCreateInput");
        firstNameCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.firstName}", String.class));
        LengthValidator firstNameCreateInputValidator = new LengthValidator();
        firstNameCreateInputValidator.setMinimum(3);
        firstNameCreateInputValidator.setMaximum(30);
        firstNameCreateInput.addValidator(firstNameCreateInputValidator);
        firstNameCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(firstNameCreateInput);
        
        Message firstNameCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        firstNameCreateInputMessage.setId("firstNameCreateInputMessage");
        firstNameCreateInputMessage.setFor("firstNameCreateInput");
        firstNameCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(firstNameCreateInputMessage);
        
        OutputLabel lastNameCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        lastNameCreateOutput.setFor("lastNameCreateInput");
        lastNameCreateOutput.setId("lastNameCreateOutput");
        lastNameCreateOutput.setValue("Last Name:");
        htmlPanelGrid.getChildren().add(lastNameCreateOutput);
        
        InputText lastNameCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        lastNameCreateInput.setId("lastNameCreateInput");
        lastNameCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.lastName}", String.class));
        LengthValidator lastNameCreateInputValidator = new LengthValidator();
        lastNameCreateInputValidator.setMinimum(3);
        lastNameCreateInputValidator.setMaximum(30);
        lastNameCreateInput.addValidator(lastNameCreateInputValidator);
        lastNameCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(lastNameCreateInput);
        
        Message lastNameCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        lastNameCreateInputMessage.setId("lastNameCreateInputMessage");
        lastNameCreateInputMessage.setFor("lastNameCreateInput");
        lastNameCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(lastNameCreateInputMessage);
        
        OutputLabel birthDayCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        birthDayCreateOutput.setFor("birthDayCreateInput");
        birthDayCreateOutput.setId("birthDayCreateOutput");
        birthDayCreateOutput.setValue("Birth Day:");
        htmlPanelGrid.getChildren().add(birthDayCreateOutput);
        
        Calendar birthDayCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        birthDayCreateInput.setId("birthDayCreateInput");
        birthDayCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.birthDay}", Date.class));
        birthDayCreateInput.setNavigator(true);
        birthDayCreateInput.setEffect("slideDown");
        birthDayCreateInput.setPattern("dd/MM/yyyy");
        birthDayCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(birthDayCreateInput);
        
        Message birthDayCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        birthDayCreateInputMessage.setId("birthDayCreateInputMessage");
        birthDayCreateInputMessage.setFor("birthDayCreateInput");
        birthDayCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(birthDayCreateInputMessage);
        
        OutputLabel imageCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        imageCreateOutput.setFor("imageCreateInput");
        imageCreateOutput.setId("imageCreateOutput");
        imageCreateOutput.setValue("Image:");
        htmlPanelGrid.getChildren().add(imageCreateOutput);
        
        FileUpload imageCreateInput = (FileUpload) application.createComponent(FileUpload.COMPONENT_TYPE);
        imageCreateInput.setId("imageCreateInput");
        imageCreateInput.setFileUploadListener(expressionFactory.createMethodExpression(elContext, "#{personBean.handleFileUploadForImage}", void.class, new Class[] { FileUploadEvent.class }));
        imageCreateInput.setMode("advanced");
        imageCreateInput.setAllowTypes("/(\\.|\\/)([jJ][pP][gG]|[jJ][pP][eE][gG])$/");
        imageCreateInput.setUpdate(":growlForm:growl");
        imageCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(imageCreateInput);
        
        Message imageCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        imageCreateInputMessage.setId("imageCreateInputMessage");
        imageCreateInputMessage.setFor("imageCreateInput");
        imageCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(imageCreateInputMessage);
        
        OutputLabel maritalStatusCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        maritalStatusCreateOutput.setFor("maritalStatusCreateInput");
        maritalStatusCreateOutput.setId("maritalStatusCreateOutput");
        maritalStatusCreateOutput.setValue("Marital Status:");
        htmlPanelGrid.getChildren().add(maritalStatusCreateOutput);
        
        AutoComplete maritalStatusCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        maritalStatusCreateInput.setId("maritalStatusCreateInput");
        maritalStatusCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.maritalStatus}", MaritalStatus.class));
        maritalStatusCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{personBean.completeMaritalStatus}", List.class, new Class[] { String.class }));
        maritalStatusCreateInput.setDropdown(true);
        maritalStatusCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(maritalStatusCreateInput);
        
        Message maritalStatusCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        maritalStatusCreateInputMessage.setId("maritalStatusCreateInputMessage");
        maritalStatusCreateInputMessage.setFor("maritalStatusCreateInput");
        maritalStatusCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(maritalStatusCreateInputMessage);
        
        OutputLabel districtCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        districtCreateOutput.setFor("districtCreateInput");
        districtCreateOutput.setId("districtCreateOutput");
        districtCreateOutput.setValue("District:");
        htmlPanelGrid.getChildren().add(districtCreateOutput);
        
        InputText districtCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        districtCreateInput.setId("districtCreateInput");
        districtCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.district}", String.class));
        LengthValidator districtCreateInputValidator = new LengthValidator();
        districtCreateInputValidator.setMinimum(3);
        districtCreateInputValidator.setMaximum(30);
        districtCreateInput.addValidator(districtCreateInputValidator);
        districtCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(districtCreateInput);
        
        Message districtCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        districtCreateInputMessage.setId("districtCreateInputMessage");
        districtCreateInputMessage.setFor("districtCreateInput");
        districtCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(districtCreateInputMessage);
        
        OutputLabel madinahCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        madinahCreateOutput.setFor("madinahCreateInput");
        madinahCreateOutput.setId("madinahCreateOutput");
        madinahCreateOutput.setValue("Madinah:");
        htmlPanelGrid.getChildren().add(madinahCreateOutput);
        
        InputText madinahCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        madinahCreateInput.setId("madinahCreateInput");
        madinahCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.madinah}", String.class));
        LengthValidator madinahCreateInputValidator = new LengthValidator();
        madinahCreateInputValidator.setMinimum(3);
        madinahCreateInputValidator.setMaximum(30);
        madinahCreateInput.addValidator(madinahCreateInputValidator);
        madinahCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(madinahCreateInput);
        
        Message madinahCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        madinahCreateInputMessage.setId("madinahCreateInputMessage");
        madinahCreateInputMessage.setFor("madinahCreateInput");
        madinahCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(madinahCreateInputMessage);
        
        OutputLabel placeCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        placeCreateOutput.setFor("placeCreateInput");
        placeCreateOutput.setId("placeCreateOutput");
        placeCreateOutput.setValue("Place:");
        htmlPanelGrid.getChildren().add(placeCreateOutput);
        
        InputTextarea placeCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        placeCreateInput.setId("placeCreateInput");
        placeCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.place}", String.class));
        LengthValidator placeCreateInputValidator = new LengthValidator();
        placeCreateInputValidator.setMinimum(3);
        placeCreateInputValidator.setMaximum(60);
        placeCreateInput.addValidator(placeCreateInputValidator);
        placeCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(placeCreateInput);
        
        Message placeCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        placeCreateInputMessage.setId("placeCreateInputMessage");
        placeCreateInputMessage.setFor("placeCreateInput");
        placeCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(placeCreateInputMessage);
        
        OutputLabel addressTypeCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        addressTypeCreateOutput.setFor("addressTypeCreateInput");
        addressTypeCreateOutput.setId("addressTypeCreateOutput");
        addressTypeCreateOutput.setValue("Address Type:");
        htmlPanelGrid.getChildren().add(addressTypeCreateOutput);
        
        AutoComplete addressTypeCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        addressTypeCreateInput.setId("addressTypeCreateInput");
        addressTypeCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.addressType}", AddressType.class));
        addressTypeCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{personBean.completeAddressType}", List.class, new Class[] { String.class }));
        addressTypeCreateInput.setDropdown(true);
        addressTypeCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(addressTypeCreateInput);
        
        Message addressTypeCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        addressTypeCreateInputMessage.setId("addressTypeCreateInputMessage");
        addressTypeCreateInputMessage.setFor("addressTypeCreateInput");
        addressTypeCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(addressTypeCreateInputMessage);
        
        OutputLabel identityIDCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        identityIDCreateOutput.setFor("identityIDCreateInput");
        identityIDCreateOutput.setId("identityIDCreateOutput");
        identityIDCreateOutput.setValue("Identity I D:");
        htmlPanelGrid.getChildren().add(identityIDCreateOutput);
        
        Spinner identityIDCreateInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        identityIDCreateInput.setId("identityIDCreateInput");
        identityIDCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.identityID}", Long.class));
        identityIDCreateInput.setRequired(true);
        identityIDCreateInput.setMin(0.0);
        LongRangeValidator identityIDCreateInputValidator = new LongRangeValidator();
        identityIDCreateInputValidator.setMinimum(0);
        identityIDCreateInput.addValidator(identityIDCreateInputValidator);
        
        htmlPanelGrid.getChildren().add(identityIDCreateInput);
        
        Message identityIDCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        identityIDCreateInputMessage.setId("identityIDCreateInputMessage");
        identityIDCreateInputMessage.setFor("identityIDCreateInput");
        identityIDCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(identityIDCreateInputMessage);
        
        OutputLabel hairColorsCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        hairColorsCreateOutput.setFor("hairColorsCreateInput");
        hairColorsCreateOutput.setId("hairColorsCreateOutput");
        hairColorsCreateOutput.setValue("Hair Colors:");
        htmlPanelGrid.getChildren().add(hairColorsCreateOutput);
        
        AutoComplete hairColorsCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        hairColorsCreateInput.setId("hairColorsCreateInput");
        hairColorsCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.hairColors}", HairColors.class));
        hairColorsCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{personBean.completeHairColors}", List.class, new Class[] { String.class }));
        hairColorsCreateInput.setDropdown(true);
        hairColorsCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(hairColorsCreateInput);
        
        Message hairColorsCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        hairColorsCreateInputMessage.setId("hairColorsCreateInputMessage");
        hairColorsCreateInputMessage.setFor("hairColorsCreateInput");
        hairColorsCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(hairColorsCreateInputMessage);
        
        OutputLabel eyeColorsCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        eyeColorsCreateOutput.setFor("eyeColorsCreateInput");
        eyeColorsCreateOutput.setId("eyeColorsCreateOutput");
        eyeColorsCreateOutput.setValue("Eye Colors:");
        htmlPanelGrid.getChildren().add(eyeColorsCreateOutput);
        
        AutoComplete eyeColorsCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        eyeColorsCreateInput.setId("eyeColorsCreateInput");
        eyeColorsCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.eyeColors}", EyeColors.class));
        eyeColorsCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{personBean.completeEyeColors}", List.class, new Class[] { String.class }));
        eyeColorsCreateInput.setDropdown(true);
        eyeColorsCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(eyeColorsCreateInput);
        
        Message eyeColorsCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        eyeColorsCreateInputMessage.setId("eyeColorsCreateInputMessage");
        eyeColorsCreateInputMessage.setFor("eyeColorsCreateInput");
        eyeColorsCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(eyeColorsCreateInputMessage);
        
        OutputLabel bloodTypeCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        bloodTypeCreateOutput.setFor("bloodTypeCreateInput");
        bloodTypeCreateOutput.setId("bloodTypeCreateOutput");
        bloodTypeCreateOutput.setValue("Blood Type:");
        htmlPanelGrid.getChildren().add(bloodTypeCreateOutput);
        
        AutoComplete bloodTypeCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        bloodTypeCreateInput.setId("bloodTypeCreateInput");
        bloodTypeCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.bloodType}", BloodGroup.class));
        bloodTypeCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{personBean.completeBloodType}", List.class, new Class[] { String.class }));
        bloodTypeCreateInput.setDropdown(true);
        bloodTypeCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(bloodTypeCreateInput);
        
        Message bloodTypeCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        bloodTypeCreateInputMessage.setId("bloodTypeCreateInputMessage");
        bloodTypeCreateInputMessage.setFor("bloodTypeCreateInput");
        bloodTypeCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(bloodTypeCreateInputMessage);
        
        OutputLabel officeCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        officeCreateOutput.setFor("officeCreateInput");
        officeCreateOutput.setId("officeCreateOutput");
        officeCreateOutput.setValue("Office:");
        htmlPanelGrid.getChildren().add(officeCreateOutput);
        
        InputText officeCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        officeCreateInput.setId("officeCreateInput");
        officeCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.office}", String.class));
        LengthValidator officeCreateInputValidator = new LengthValidator();
        officeCreateInputValidator.setMinimum(3);
        officeCreateInputValidator.setMaximum(30);
        officeCreateInput.addValidator(officeCreateInputValidator);
        officeCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(officeCreateInput);
        
        Message officeCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        officeCreateInputMessage.setId("officeCreateInputMessage");
        officeCreateInputMessage.setFor("officeCreateInput");
        officeCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(officeCreateInputMessage);
        
        OutputLabel jobTitleCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        jobTitleCreateOutput.setFor("jobTitleCreateInput");
        jobTitleCreateOutput.setId("jobTitleCreateOutput");
        jobTitleCreateOutput.setValue("Job Title:");
        htmlPanelGrid.getChildren().add(jobTitleCreateOutput);
        
        InputText jobTitleCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        jobTitleCreateInput.setId("jobTitleCreateInput");
        jobTitleCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.jobTitle}", String.class));
        LengthValidator jobTitleCreateInputValidator = new LengthValidator();
        jobTitleCreateInputValidator.setMinimum(3);
        jobTitleCreateInputValidator.setMaximum(30);
        jobTitleCreateInput.addValidator(jobTitleCreateInputValidator);
        jobTitleCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(jobTitleCreateInput);
        
        Message jobTitleCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        jobTitleCreateInputMessage.setId("jobTitleCreateInputMessage");
        jobTitleCreateInputMessage.setFor("jobTitleCreateInput");
        jobTitleCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(jobTitleCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid PersonBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel firstNameEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        firstNameEditOutput.setFor("firstNameEditInput");
        firstNameEditOutput.setId("firstNameEditOutput");
        firstNameEditOutput.setValue("First Name:");
        htmlPanelGrid.getChildren().add(firstNameEditOutput);
        
        InputText firstNameEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        firstNameEditInput.setId("firstNameEditInput");
        firstNameEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.firstName}", String.class));
        LengthValidator firstNameEditInputValidator = new LengthValidator();
        firstNameEditInputValidator.setMinimum(3);
        firstNameEditInputValidator.setMaximum(30);
        firstNameEditInput.addValidator(firstNameEditInputValidator);
        firstNameEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(firstNameEditInput);
        
        Message firstNameEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        firstNameEditInputMessage.setId("firstNameEditInputMessage");
        firstNameEditInputMessage.setFor("firstNameEditInput");
        firstNameEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(firstNameEditInputMessage);
        
        OutputLabel lastNameEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        lastNameEditOutput.setFor("lastNameEditInput");
        lastNameEditOutput.setId("lastNameEditOutput");
        lastNameEditOutput.setValue("Last Name:");
        htmlPanelGrid.getChildren().add(lastNameEditOutput);
        
        InputText lastNameEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        lastNameEditInput.setId("lastNameEditInput");
        lastNameEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.lastName}", String.class));
        LengthValidator lastNameEditInputValidator = new LengthValidator();
        lastNameEditInputValidator.setMinimum(3);
        lastNameEditInputValidator.setMaximum(30);
        lastNameEditInput.addValidator(lastNameEditInputValidator);
        lastNameEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(lastNameEditInput);
        
        Message lastNameEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        lastNameEditInputMessage.setId("lastNameEditInputMessage");
        lastNameEditInputMessage.setFor("lastNameEditInput");
        lastNameEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(lastNameEditInputMessage);
        
        OutputLabel birthDayEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        birthDayEditOutput.setFor("birthDayEditInput");
        birthDayEditOutput.setId("birthDayEditOutput");
        birthDayEditOutput.setValue("Birth Day:");
        htmlPanelGrid.getChildren().add(birthDayEditOutput);
        
        Calendar birthDayEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        birthDayEditInput.setId("birthDayEditInput");
        birthDayEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.birthDay}", Date.class));
        birthDayEditInput.setNavigator(true);
        birthDayEditInput.setEffect("slideDown");
        birthDayEditInput.setPattern("dd/MM/yyyy");
        birthDayEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(birthDayEditInput);
        
        Message birthDayEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        birthDayEditInputMessage.setId("birthDayEditInputMessage");
        birthDayEditInputMessage.setFor("birthDayEditInput");
        birthDayEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(birthDayEditInputMessage);
        
        OutputLabel imageEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        imageEditOutput.setFor("imageEditInput");
        imageEditOutput.setId("imageEditOutput");
        imageEditOutput.setValue("Image:");
        htmlPanelGrid.getChildren().add(imageEditOutput);
        
        FileUpload imageEditInput = (FileUpload) application.createComponent(FileUpload.COMPONENT_TYPE);
        imageEditInput.setId("imageEditInput");
        imageEditInput.setFileUploadListener(expressionFactory.createMethodExpression(elContext, "#{personBean.handleFileUploadForImage}", void.class, new Class[] { FileUploadEvent.class }));
        imageEditInput.setMode("advanced");
        imageEditInput.setAllowTypes("/(\\.|\\/)([jJ][pP][gG]|[jJ][pP][eE][gG])$/");
        imageEditInput.setUpdate(":growlForm:growl");
        imageEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(imageEditInput);
        
        Message imageEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        imageEditInputMessage.setId("imageEditInputMessage");
        imageEditInputMessage.setFor("imageEditInput");
        imageEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(imageEditInputMessage);
        
        OutputLabel maritalStatusEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        maritalStatusEditOutput.setFor("maritalStatusEditInput");
        maritalStatusEditOutput.setId("maritalStatusEditOutput");
        maritalStatusEditOutput.setValue("Marital Status:");
        htmlPanelGrid.getChildren().add(maritalStatusEditOutput);
        
        AutoComplete maritalStatusEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        maritalStatusEditInput.setId("maritalStatusEditInput");
        maritalStatusEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.maritalStatus}", MaritalStatus.class));
        maritalStatusEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{personBean.completeMaritalStatus}", List.class, new Class[] { String.class }));
        maritalStatusEditInput.setDropdown(true);
        maritalStatusEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(maritalStatusEditInput);
        
        Message maritalStatusEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        maritalStatusEditInputMessage.setId("maritalStatusEditInputMessage");
        maritalStatusEditInputMessage.setFor("maritalStatusEditInput");
        maritalStatusEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(maritalStatusEditInputMessage);
        
        OutputLabel districtEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        districtEditOutput.setFor("districtEditInput");
        districtEditOutput.setId("districtEditOutput");
        districtEditOutput.setValue("District:");
        htmlPanelGrid.getChildren().add(districtEditOutput);
        
        InputText districtEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        districtEditInput.setId("districtEditInput");
        districtEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.district}", String.class));
        LengthValidator districtEditInputValidator = new LengthValidator();
        districtEditInputValidator.setMinimum(3);
        districtEditInputValidator.setMaximum(30);
        districtEditInput.addValidator(districtEditInputValidator);
        districtEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(districtEditInput);
        
        Message districtEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        districtEditInputMessage.setId("districtEditInputMessage");
        districtEditInputMessage.setFor("districtEditInput");
        districtEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(districtEditInputMessage);
        
        OutputLabel madinahEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        madinahEditOutput.setFor("madinahEditInput");
        madinahEditOutput.setId("madinahEditOutput");
        madinahEditOutput.setValue("Madinah:");
        htmlPanelGrid.getChildren().add(madinahEditOutput);
        
        InputText madinahEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        madinahEditInput.setId("madinahEditInput");
        madinahEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.madinah}", String.class));
        LengthValidator madinahEditInputValidator = new LengthValidator();
        madinahEditInputValidator.setMinimum(3);
        madinahEditInputValidator.setMaximum(30);
        madinahEditInput.addValidator(madinahEditInputValidator);
        madinahEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(madinahEditInput);
        
        Message madinahEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        madinahEditInputMessage.setId("madinahEditInputMessage");
        madinahEditInputMessage.setFor("madinahEditInput");
        madinahEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(madinahEditInputMessage);
        
        OutputLabel placeEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        placeEditOutput.setFor("placeEditInput");
        placeEditOutput.setId("placeEditOutput");
        placeEditOutput.setValue("Place:");
        htmlPanelGrid.getChildren().add(placeEditOutput);
        
        InputTextarea placeEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        placeEditInput.setId("placeEditInput");
        placeEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.place}", String.class));
        LengthValidator placeEditInputValidator = new LengthValidator();
        placeEditInputValidator.setMinimum(3);
        placeEditInputValidator.setMaximum(60);
        placeEditInput.addValidator(placeEditInputValidator);
        placeEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(placeEditInput);
        
        Message placeEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        placeEditInputMessage.setId("placeEditInputMessage");
        placeEditInputMessage.setFor("placeEditInput");
        placeEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(placeEditInputMessage);
        
        OutputLabel addressTypeEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        addressTypeEditOutput.setFor("addressTypeEditInput");
        addressTypeEditOutput.setId("addressTypeEditOutput");
        addressTypeEditOutput.setValue("Address Type:");
        htmlPanelGrid.getChildren().add(addressTypeEditOutput);
        
        AutoComplete addressTypeEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        addressTypeEditInput.setId("addressTypeEditInput");
        addressTypeEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.addressType}", AddressType.class));
        addressTypeEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{personBean.completeAddressType}", List.class, new Class[] { String.class }));
        addressTypeEditInput.setDropdown(true);
        addressTypeEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(addressTypeEditInput);
        
        Message addressTypeEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        addressTypeEditInputMessage.setId("addressTypeEditInputMessage");
        addressTypeEditInputMessage.setFor("addressTypeEditInput");
        addressTypeEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(addressTypeEditInputMessage);
        
        OutputLabel identityIDEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        identityIDEditOutput.setFor("identityIDEditInput");
        identityIDEditOutput.setId("identityIDEditOutput");
        identityIDEditOutput.setValue("Identity I D:");
        htmlPanelGrid.getChildren().add(identityIDEditOutput);
        
        Spinner identityIDEditInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        identityIDEditInput.setId("identityIDEditInput");
        identityIDEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.identityID}", Long.class));
        identityIDEditInput.setRequired(true);
        identityIDEditInput.setMin(0.0);
        LongRangeValidator identityIDEditInputValidator = new LongRangeValidator();
        identityIDEditInputValidator.setMinimum(0);
        identityIDEditInput.addValidator(identityIDEditInputValidator);
        
        htmlPanelGrid.getChildren().add(identityIDEditInput);
        
        Message identityIDEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        identityIDEditInputMessage.setId("identityIDEditInputMessage");
        identityIDEditInputMessage.setFor("identityIDEditInput");
        identityIDEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(identityIDEditInputMessage);
        
        OutputLabel hairColorsEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        hairColorsEditOutput.setFor("hairColorsEditInput");
        hairColorsEditOutput.setId("hairColorsEditOutput");
        hairColorsEditOutput.setValue("Hair Colors:");
        htmlPanelGrid.getChildren().add(hairColorsEditOutput);
        
        AutoComplete hairColorsEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        hairColorsEditInput.setId("hairColorsEditInput");
        hairColorsEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.hairColors}", HairColors.class));
        hairColorsEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{personBean.completeHairColors}", List.class, new Class[] { String.class }));
        hairColorsEditInput.setDropdown(true);
        hairColorsEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(hairColorsEditInput);
        
        Message hairColorsEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        hairColorsEditInputMessage.setId("hairColorsEditInputMessage");
        hairColorsEditInputMessage.setFor("hairColorsEditInput");
        hairColorsEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(hairColorsEditInputMessage);
        
        OutputLabel eyeColorsEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        eyeColorsEditOutput.setFor("eyeColorsEditInput");
        eyeColorsEditOutput.setId("eyeColorsEditOutput");
        eyeColorsEditOutput.setValue("Eye Colors:");
        htmlPanelGrid.getChildren().add(eyeColorsEditOutput);
        
        AutoComplete eyeColorsEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        eyeColorsEditInput.setId("eyeColorsEditInput");
        eyeColorsEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.eyeColors}", EyeColors.class));
        eyeColorsEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{personBean.completeEyeColors}", List.class, new Class[] { String.class }));
        eyeColorsEditInput.setDropdown(true);
        eyeColorsEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(eyeColorsEditInput);
        
        Message eyeColorsEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        eyeColorsEditInputMessage.setId("eyeColorsEditInputMessage");
        eyeColorsEditInputMessage.setFor("eyeColorsEditInput");
        eyeColorsEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(eyeColorsEditInputMessage);
        
        OutputLabel bloodTypeEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        bloodTypeEditOutput.setFor("bloodTypeEditInput");
        bloodTypeEditOutput.setId("bloodTypeEditOutput");
        bloodTypeEditOutput.setValue("Blood Type:");
        htmlPanelGrid.getChildren().add(bloodTypeEditOutput);
        
        AutoComplete bloodTypeEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        bloodTypeEditInput.setId("bloodTypeEditInput");
        bloodTypeEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.bloodType}", BloodGroup.class));
        bloodTypeEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{personBean.completeBloodType}", List.class, new Class[] { String.class }));
        bloodTypeEditInput.setDropdown(true);
        bloodTypeEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(bloodTypeEditInput);
        
        Message bloodTypeEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        bloodTypeEditInputMessage.setId("bloodTypeEditInputMessage");
        bloodTypeEditInputMessage.setFor("bloodTypeEditInput");
        bloodTypeEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(bloodTypeEditInputMessage);
        
        OutputLabel officeEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        officeEditOutput.setFor("officeEditInput");
        officeEditOutput.setId("officeEditOutput");
        officeEditOutput.setValue("Office:");
        htmlPanelGrid.getChildren().add(officeEditOutput);
        
        InputText officeEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        officeEditInput.setId("officeEditInput");
        officeEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.office}", String.class));
        LengthValidator officeEditInputValidator = new LengthValidator();
        officeEditInputValidator.setMinimum(3);
        officeEditInputValidator.setMaximum(30);
        officeEditInput.addValidator(officeEditInputValidator);
        officeEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(officeEditInput);
        
        Message officeEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        officeEditInputMessage.setId("officeEditInputMessage");
        officeEditInputMessage.setFor("officeEditInput");
        officeEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(officeEditInputMessage);
        
        OutputLabel jobTitleEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        jobTitleEditOutput.setFor("jobTitleEditInput");
        jobTitleEditOutput.setId("jobTitleEditOutput");
        jobTitleEditOutput.setValue("Job Title:");
        htmlPanelGrid.getChildren().add(jobTitleEditOutput);
        
        InputText jobTitleEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        jobTitleEditInput.setId("jobTitleEditInput");
        jobTitleEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.jobTitle}", String.class));
        LengthValidator jobTitleEditInputValidator = new LengthValidator();
        jobTitleEditInputValidator.setMinimum(3);
        jobTitleEditInputValidator.setMaximum(30);
        jobTitleEditInput.addValidator(jobTitleEditInputValidator);
        jobTitleEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(jobTitleEditInput);
        
        Message jobTitleEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        jobTitleEditInputMessage.setId("jobTitleEditInputMessage");
        jobTitleEditInputMessage.setFor("jobTitleEditInput");
        jobTitleEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(jobTitleEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid PersonBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText firstNameLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        firstNameLabel.setId("firstNameLabel");
        firstNameLabel.setValue("First Name:");
        htmlPanelGrid.getChildren().add(firstNameLabel);
        
        HtmlOutputText firstNameValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        firstNameValue.setId("firstNameValue");
        firstNameValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.firstName}", String.class));
        htmlPanelGrid.getChildren().add(firstNameValue);
        
        HtmlOutputText lastNameLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        lastNameLabel.setId("lastNameLabel");
        lastNameLabel.setValue("Last Name:");
        htmlPanelGrid.getChildren().add(lastNameLabel);
        
        HtmlOutputText lastNameValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        lastNameValue.setId("lastNameValue");
        lastNameValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.lastName}", String.class));
        htmlPanelGrid.getChildren().add(lastNameValue);
        
        HtmlOutputText birthDayLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        birthDayLabel.setId("birthDayLabel");
        birthDayLabel.setValue("Birth Day:");
        htmlPanelGrid.getChildren().add(birthDayLabel);
        
        HtmlOutputText birthDayValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        birthDayValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.birthDay}", Date.class));
        DateTimeConverter birthDayValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        birthDayValueConverter.setPattern("dd/MM/yyyy");
        birthDayValue.setConverter(birthDayValueConverter);
        htmlPanelGrid.getChildren().add(birthDayValue);
        
        HtmlOutputText imageLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        imageLabel.setId("imageLabel");
        imageLabel.setValue("Image:");
        htmlPanelGrid.getChildren().add(imageLabel);
        
        UIComponent imageValue;
        if (person != null && person.getImage() != null && person.getImage().length > 0) {
            imageValue = (CommandButton) application.createComponent(CommandButton.COMPONENT_TYPE);
            ((CommandButton) imageValue).addActionListener(new FileDownloadActionListener(expressionFactory.createValueExpression(elContext, "#{personBean.imageStreamedContent}", StreamedContent.class), null));
            ((CommandButton) imageValue).setValue("Download");
            ((CommandButton) imageValue).setAjax(false);
        } else {
            imageValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
            ((HtmlOutputText) imageValue).setValue("");
        }
        htmlPanelGrid.getChildren().add(imageValue);
        
        HtmlOutputText maritalStatusLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        maritalStatusLabel.setId("maritalStatusLabel");
        maritalStatusLabel.setValue("Marital Status:");
        htmlPanelGrid.getChildren().add(maritalStatusLabel);
        
        HtmlOutputText maritalStatusValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        maritalStatusValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.maritalStatus}", String.class));
        htmlPanelGrid.getChildren().add(maritalStatusValue);
        
        HtmlOutputText districtLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        districtLabel.setId("districtLabel");
        districtLabel.setValue("District:");
        htmlPanelGrid.getChildren().add(districtLabel);
        
        HtmlOutputText districtValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        districtValue.setId("districtValue");
        districtValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.district}", String.class));
        htmlPanelGrid.getChildren().add(districtValue);
        
        HtmlOutputText madinahLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        madinahLabel.setId("madinahLabel");
        madinahLabel.setValue("Madinah:");
        htmlPanelGrid.getChildren().add(madinahLabel);
        
        HtmlOutputText madinahValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        madinahValue.setId("madinahValue");
        madinahValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.madinah}", String.class));
        htmlPanelGrid.getChildren().add(madinahValue);
        
        HtmlOutputText placeLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        placeLabel.setId("placeLabel");
        placeLabel.setValue("Place:");
        htmlPanelGrid.getChildren().add(placeLabel);
        
        InputTextarea placeValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        placeValue.setId("placeValue");
        placeValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.place}", String.class));
        placeValue.setReadonly(true);
        placeValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(placeValue);
        
        HtmlOutputText addressTypeLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        addressTypeLabel.setId("addressTypeLabel");
        addressTypeLabel.setValue("Address Type:");
        htmlPanelGrid.getChildren().add(addressTypeLabel);
        
        HtmlOutputText addressTypeValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        addressTypeValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.addressType}", String.class));
        htmlPanelGrid.getChildren().add(addressTypeValue);
        
        HtmlOutputText identityIDLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        identityIDLabel.setId("identityIDLabel");
        identityIDLabel.setValue("Identity I D:");
        htmlPanelGrid.getChildren().add(identityIDLabel);
        
        HtmlOutputText identityIDValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        identityIDValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.identityID}", String.class));
        htmlPanelGrid.getChildren().add(identityIDValue);
        
        HtmlOutputText hairColorsLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        hairColorsLabel.setId("hairColorsLabel");
        hairColorsLabel.setValue("Hair Colors:");
        htmlPanelGrid.getChildren().add(hairColorsLabel);
        
        HtmlOutputText hairColorsValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        hairColorsValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.hairColors}", String.class));
        htmlPanelGrid.getChildren().add(hairColorsValue);
        
        HtmlOutputText eyeColorsLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        eyeColorsLabel.setId("eyeColorsLabel");
        eyeColorsLabel.setValue("Eye Colors:");
        htmlPanelGrid.getChildren().add(eyeColorsLabel);
        
        HtmlOutputText eyeColorsValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        eyeColorsValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.eyeColors}", String.class));
        htmlPanelGrid.getChildren().add(eyeColorsValue);
        
        HtmlOutputText bloodTypeLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        bloodTypeLabel.setId("bloodTypeLabel");
        bloodTypeLabel.setValue("Blood Type:");
        htmlPanelGrid.getChildren().add(bloodTypeLabel);
        
        HtmlOutputText bloodTypeValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        bloodTypeValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.bloodType}", String.class));
        htmlPanelGrid.getChildren().add(bloodTypeValue);
        
        HtmlOutputText officeLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        officeLabel.setId("officeLabel");
        officeLabel.setValue("Office:");
        htmlPanelGrid.getChildren().add(officeLabel);
        
        HtmlOutputText officeValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        officeValue.setId("officeValue");
        officeValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.office}", String.class));
        htmlPanelGrid.getChildren().add(officeValue);
        
        HtmlOutputText jobTitleLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        jobTitleLabel.setId("jobTitleLabel");
        jobTitleLabel.setValue("Job Title:");
        htmlPanelGrid.getChildren().add(jobTitleLabel);
        
        HtmlOutputText jobTitleValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        jobTitleValue.setId("jobTitleValue");
        jobTitleValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.jobTitle}", String.class));
        htmlPanelGrid.getChildren().add(jobTitleValue);
        
        return htmlPanelGrid;
    }
    
    public Person PersonBean.getPerson() {
        if (person == null) {
            person = new Person();
        }
        return person;
    }
    
    public void PersonBean.setPerson(Person person) {
        this.person = person;
    }
    
    public void PersonBean.handleFileUploadForImage(FileUploadEvent event) {
        person.setImage(event.getFile().getContents());
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_uploaded", event.getFile().getFileName());
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
    }
    
    public StreamedContent PersonBean.getImageStreamedContent() {
        if (person != null && person.getImage() != null) {
            return new DefaultStreamedContent(new ByteArrayInputStream(person.getImage()), "image/jpeg", "image.jpg");
        }
        return new DefaultStreamedContent(new ByteArrayInputStream("".getBytes()));
    }
    
    public List<MaritalStatus> PersonBean.completeMaritalStatus(String query) {
        List<MaritalStatus> suggestions = new ArrayList<MaritalStatus>();
        for (MaritalStatus maritalStatus : MaritalStatus.values()) {
            if (maritalStatus.name().toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(maritalStatus);
            }
        }
        return suggestions;
    }
    
    public List<AddressType> PersonBean.completeAddressType(String query) {
        List<AddressType> suggestions = new ArrayList<AddressType>();
        for (AddressType addressType : AddressType.values()) {
            if (addressType.name().toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(addressType);
            }
        }
        return suggestions;
    }
    
    public List<HairColors> PersonBean.completeHairColors(String query) {
        List<HairColors> suggestions = new ArrayList<HairColors>();
        for (HairColors hairColors : HairColors.values()) {
            if (hairColors.name().toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(hairColors);
            }
        }
        return suggestions;
    }
    
    public List<EyeColors> PersonBean.completeEyeColors(String query) {
        List<EyeColors> suggestions = new ArrayList<EyeColors>();
        for (EyeColors eyeColors : EyeColors.values()) {
            if (eyeColors.name().toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(eyeColors);
            }
        }
        return suggestions;
    }
    
    public List<BloodGroup> PersonBean.completeBloodType(String query) {
        List<BloodGroup> suggestions = new ArrayList<BloodGroup>();
        for (BloodGroup bloodGroup : BloodGroup.values()) {
            if (bloodGroup.name().toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(bloodGroup);
            }
        }
        return suggestions;
    }
    
    public String PersonBean.onEdit() {
        return null;
    }
    
    public boolean PersonBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void PersonBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String PersonBean.displayList() {
        createDialogVisible = false;
        findAllPeople();
        return "person";
    }
    
    public String PersonBean.displayCreateDialog() {
        person = new Person();
        createDialogVisible = true;
        return "person";
    }
    
    public String PersonBean.persist() {
        String message = "";
        if (person.getId() != null) {
            person.merge();
            message = "message_successfully_updated";
        } else {
            person.persist();
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "Person");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllPeople();
    }
    
    public String PersonBean.delete() {
        person.remove();
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "Person");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllPeople();
    }
    
    public void PersonBean.reset() {
        person = null;
        createDialogVisible = false;
    }
    
    public void PersonBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
